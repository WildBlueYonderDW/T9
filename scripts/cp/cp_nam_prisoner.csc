#using script_38867f943fb86135;
#using script_658912bcc638205;
#using scripts\autogenerated\luielems\cp\full_screen_movie;
#using scripts\core_common\ai\zombie_eye_glow;
#using scripts\core_common\callbacks_shared;
#using scripts\core_common\clientfield_shared;
#using scripts\core_common\easing;
#using scripts\core_common\flashlight;
#using scripts\core_common\load_shared;
#using scripts\core_common\lui_shared;
#using scripts\core_common\postfx_shared;
#using scripts\core_common\scene_shared;
#using scripts\core_common\struct;
#using scripts\core_common\util_shared;
#using scripts\cp_common\util;

#namespace cp_nam_prisoner;

// Namespace cp_nam_prisoner/level_init
// Params 1, eflags: 0x20
// Checksum 0xd7057e6, Offset: 0xfa8
// Size: 0x1a4
function event_handler[level_init] main( *eventstruct )
{
    full_screen_movie::register();
    setsaveddvar( #"enable_global_wind", 1 );
    setsaveddvar( #"wind_global_vector", "88 0 0" );
    setsaveddvar( #"wind_global_low_altitude", 0 );
    setsaveddvar( #"wind_global_hi_altitude", 10000 );
    setsaveddvar( #"wind_global_low_strength_percent", 100 );
    init_clientfields();
    callback::on_gameplay_started( &on_gameplay_started );
    load::main();
    level thread postload();
    util::waitforclient( 0 );
    function_27d5cafd( #"hash_bc5dbc7b5e13b6b", #"hash_433705ff0d359b2e" );
    level._effect[ #"darkroom_light" ] = #"hash_78e234f940b499a";
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 0, eflags: 0x0
// Checksum 0x9e843b0a, Offset: 0x1158
// Size: 0x3c
function postload()
{
    level._effect[ #"hash_2b8b4be2cb5925ab" ] = #"hash_194e390fb626282e";
    function_bdab05e9();
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 0, eflags: 0x0
// Checksum 0x609387f2, Offset: 0x11a0
// Size: 0x67c
function init_clientfields()
{
    clientfield::register( "toplayer", "pstfx_waterfall_droplets", 1, 1, "int", &pstfx_waterfall_droplets, 0, 0 );
    clientfield::register( "scriptmover", "rice_paddies_heli_1_spark_fx", 1, 1, "int", &rice_paddies_heli_1_spark_fx, 0, 0 );
    clientfield::register( "toplayer", "lerp_fov", 1, 7, "int", &lerp_fov, 0, 1 );
    clientfield::register( "toplayer", "pstfx_slowed", 1, 1, "int", &pstfx_slowed, 0, 0 );
    clientfield::register( "toplayer", "pstfx_napalm_dirt", 1, 1, "int", &pstfx_napalm_dirt, 0, 0 );
    clientfield::register( "toplayer", "pstfx_injection", 1, 1, "int", &pstfx_injection, 0, 0 );
    clientfield::register( "toplayer", "pstfx_teleport", 1, 3, "int", &pstfx_teleport, 0, 0 );
    clientfield::register( "toplayer", "set_player_pbg_bank", 1, 3, "int", &set_player_pbg_bank, 0, 0 );
    clientfield::register( "world", "dmg_models_and_vol_decals_napalm_strike", 1, 1, "int", &function_97742742, 0, 1 );
    clientfield::register( "world", "dmg_models_and_vol_decals_village", 1, 1, "int", &function_fb57d93, 0, 1 );
    clientfield::register( "scriptmover", "darkroom_light", 1, 1, "int", &darkroom_light, 0, 0 );
    clientfield::register( "scriptmover", "render_texture_switch", 1, 3, "int", &render_texture_switch, 0, 0 );
    clientfield::register( "item", "render_texture_switch", 1, 3, "int", &render_texture_switch, 0, 0 );
    clientfield::register( "vehicle", "render_texture_switch", 1, 3, "int", &render_texture_switch, 0, 0 );
    clientfield::register( "actor", "render_texture_switch", 1, 3, "int", &render_texture_switch, 0, 0 );
    clientfield::register( "scriptmover", "render_texture_switch_window", 1, 3, "int", &render_texture_switch_window, 0, 0 );
    clientfield::register( "toplayer", "rt_flashlight", 1, 1, "int", &function_70723e25, 0, 0 );
    clientfield::register( "toplayer", "rt_character_visibility", 1, 3, "int", &function_d70f07a2, 0, 0 );
    clientfield::register( "scriptmover", "slide_projector_anim", 1, 1, "int", &function_cad5695c, 0, 0 );
    clientfield::register( "world", "streamer_handler", 1, 20, "int", &streamer_handler, 0, 0 );
    clientfield::register( "world", "toggle_occluder", 1, 4, "int", &toggle_occluder, 0, 0 );
    clientfield::register( "actor", "toggle_bone_constraint", 1, 1, "int", &toggle_bone_constraint, 0, 0 );
    clientfield::register( "toplayer", "force_stream_weapons", 1, 7, "int", &force_stream_weapons, 1, 1 );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x6afa504, Offset: 0x1828
// Size: 0x164
function pstfx_waterfall_droplets( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwasdemojump )
{
    if ( bwasdemojump )
    {
        if ( self postfx::function_556665f2( "pstfx_sprite_waterfall_scripted_prisoner" ) )
        {
            self postfx::stoppostfxbundle( "pstfx_sprite_waterfall_scripted_prisoner" );
        }
        
        self postfx::playpostfxbundle( "pstfx_sprite_waterfall_scripted_prisoner" );
        self postfx::function_c8b5f318( "pstfx_sprite_waterfall_scripted_prisoner", "Origin X", 0 );
        self postfx::function_c8b5f318( "pstfx_sprite_waterfall_scripted_prisoner", "Origin Y", -1 );
        self thread function_1d53e33a();
        return;
    }
    
    self notify( #"hash_7ecd8c122757d299" );
    
    if ( self postfx::function_556665f2( "pstfx_sprite_waterfall_scripted_prisoner" ) )
    {
        self postfx::stoppostfxbundle( "pstfx_sprite_waterfall_scripted_prisoner" );
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 0, eflags: 0x0
// Checksum 0xa348cc47, Offset: 0x1998
// Size: 0x156
function function_1d53e33a()
{
    self notify( "55e2d297291bfd02" );
    self endon( "55e2d297291bfd02" );
    self endon( #"death" );
    self endon( #"hash_7ecd8c122757d299" );
    var_3b16b806 = sqr( 64 );
    var_87c1e213 = sqr( 420 );
    var_25d0c4ed = struct::get( "waterfall_origin", "targetname" );
    
    while ( true )
    {
        distsqr = distance2dsquared( self.origin, var_25d0c4ed.origin );
        value = ( distsqr - var_3b16b806 ) / ( var_87c1e213 - var_3b16b806 );
        value = max( 0, min( 1, value ) );
        self postfx::function_c8b5f318( "pstfx_sprite_waterfall_scripted_prisoner", "Sprite Count Squash", value );
        waitframe( 1 );
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x8428dedf, Offset: 0x1af8
// Size: 0xae
function rice_paddies_heli_1_spark_fx( localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwasdemojump )
{
    if ( bwasdemojump )
    {
        self.var_aa0f357b = util::playfxontag( fieldname, "maps/cp_prisoner/fx9_prisoner_heli_ckpt_sparks_01", self, "tag_fx_malfunction_upper_console_1" );
        return;
    }
    
    if ( isdefined( self.var_aa0f357b ) )
    {
        killfx( fieldname, self.var_aa0f357b );
        self.var_aa0f357b = undefined;
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x5087940d, Offset: 0x1bb0
// Size: 0x47a
function lerp_fov( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwasdemojump )
{
    switch ( bwasdemojump )
    {
        case 1:
            self thread dof_enable_autofocus();
            break;
        case 2:
            self function_9298adaf( 0.5 );
            self thread dof_disable_autofocus();
            break;
        case 3:
            self function_9e574055( 2 );
            self easing::function_136edb11( undefined, 1.2, 1, #"linear", 1, 1 );
            self function_d7be9a9f( 95, 1 );
            break;
        case 4:
            self function_9298adaf( 2 );
            self function_9e574055( 0 );
            self function_3c54e2b8( 2 );
            self function_9ea7b4eb( 2 );
            break;
        case 5:
            self function_9e574055( 2 );
            self easing::function_136edb11( undefined, 1.2, 1, #"linear", 1, 1 );
            self thread function_c7895245();
            break;
        case 6:
            self function_9e574055( 2 );
            self easing::function_136edb11( undefined, 1.2, 1, #"linear", 1, 1 );
            self easing::function_f95cb457( undefined, 17.2, 5, #"linear" );
            break;
        case 7:
            self function_9e574055( 2 );
            self easing::function_136edb11( undefined, 1.2, 1, #"linear", 1, 1 );
            self easing::function_f95cb457( undefined, 10.2, 3, #"linear" );
            break;
        case 8:
            self function_9e574055( 2 );
            self easing::function_136edb11( undefined, 1.2, 1, #"linear", 1, 1 );
            self thread function_2e6f4c58();
            break;
        case 0:
        default:
            self function_9e574055( 0 );
            self function_9298adaf( 0.5 );
            self function_3c54e2b8( 2 );
            self thread dof_disable_autofocus();
            break;
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 0, eflags: 0x0
// Checksum 0x71743096, Offset: 0x2038
// Size: 0x1d0
function function_c7895245()
{
    level.var_c6a04675 = 1;
    level.var_22caf5d5 = 3;
    self endoncallback( &function_44748e5a, #"death", #"disable_autofocus" );
    
    while ( true )
    {
        var_ae1ec0db = randomfloatrange( level.var_c6a04675, level.var_22caf5d5 );
        self easing::function_f95cb457( undefined, 20.2, var_ae1ec0db, #"linear" );
        self postfx::playpostfxbundle( "pstfx_ice_slide_motion_blur" );
        wait var_ae1ec0db;
        self postfx::exitpostfxbundle( "pstfx_ice_slide_motion_blur" );
        wait randomfloatrange( 0.5, 2 );
        var_ae1ec0db = randomfloatrange( level.var_c6a04675, level.var_22caf5d5 );
        self easing::function_f95cb457( undefined, 17.2, var_ae1ec0db, #"linear" );
        self postfx::playpostfxbundle( "pstfx_ice_slide_motion_blur" );
        wait var_ae1ec0db;
        self postfx::exitpostfxbundle( "pstfx_ice_slide_motion_blur" );
        wait randomfloatrange( 0.5, 2 );
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 0, eflags: 0x0
// Checksum 0xf8a9835, Offset: 0x2210
// Size: 0xb4
function function_2e6f4c58()
{
    self endoncallback( &function_44748e5a, #"death", #"disable_autofocus" );
    self easing::function_f95cb457( undefined, 20.2, 0.5, #"linear" );
    self postfx::playpostfxbundle( "pstfx_ice_slide_motion_blur" );
    wait 0.5;
    self postfx::exitpostfxbundle( "pstfx_ice_slide_motion_blur" );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 1, eflags: 0x0
// Checksum 0x35dd6494, Offset: 0x22d0
// Size: 0x74
function function_44748e5a( *str_notify )
{
    self function_9e574055( 0 );
    self function_3c54e2b8( 1 );
    self function_9ea7b4eb( 1 );
    self postfx::exitpostfxbundle( "pstfx_ice_slide_motion_blur" );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 0, eflags: 0x0
// Checksum 0x18b08a23, Offset: 0x2350
// Size: 0x1ee
function dof_enable_autofocus()
{
    self endoncallback( &function_26826144, #"death", #"disable_autofocus" );
    self function_9e574055( 1 );
    self easing::function_136edb11( undefined, 5.6, 1, #"linear" );
    
    while ( true )
    {
        v_eye = self geteye();
        v_fwd = anglestoforward( self getcamangles() );
        a_trace = physicstrace( v_eye, v_eye + v_fwd * 4000, ( 1 * -1, 1 * -1, 1 * -1 ), ( 1, 1, 1 ), self, 1 );
        var_a84275e3 = distance( v_eye, a_trace[ #"position" ] + v_fwd * 1 );
        
        if ( var_a84275e3 < 100 )
        {
            self function_9e574055( 2 );
        }
        else
        {
            self function_9e574055( 1 );
        }
        
        self function_d7be9a9f( var_a84275e3, 0 );
        waitframe( 1 );
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 0, eflags: 0x0
// Checksum 0xd42cbe26, Offset: 0x2548
// Size: 0x16
function dof_disable_autofocus()
{
    self notify( #"disable_autofocus" );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 1, eflags: 0x0
// Checksum 0x456b3192, Offset: 0x2568
// Size: 0x54
function function_26826144( *str_notify )
{
    self function_9e574055( 0 );
    self function_3c54e2b8( 1 );
    self function_9ea7b4eb( 1 );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x60939d0e, Offset: 0x25c8
// Size: 0xc4
function pstfx_slowed( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    if ( bwastimejump )
    {
        if ( self postfx::function_556665f2( "pstfx_slowed" ) )
        {
            self postfx::stoppostfxbundle( "pstfx_slowed" );
        }
        
        self postfx::playpostfxbundle( "pstfx_slowed" );
        return;
    }
    
    self postfx::exitpostfxbundle( "pstfx_slowed" );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 0, eflags: 0x0
// Checksum 0xbadcc5af, Offset: 0x2698
// Size: 0x34
function function_bdab05e9()
{
    level.var_dde2e62 = getentarray( 0, "fx_napalm", "targetname" );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0xb3f40afb, Offset: 0x26d8
// Size: 0xd4
function pstfx_napalm_dirt( localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    self notify( #"restart_napalm_strike" );
    
    if ( bwastimejump && isdefined( level.var_dde2e62 ) && level.var_dde2e62.size > 0 )
    {
        self thread function_1e05b75b( fieldname );
        return;
    }
    
    if ( self postfx::function_556665f2( "pstfx_napalm_burn_loop" ) )
    {
        self postfx::exitpostfxbundle( "pstfx_napalm_burn_loop" );
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 1, eflags: 0x0
// Checksum 0x194bbec5, Offset: 0x27b8
// Size: 0xbc
function function_1e05b75b( localclientnum )
{
    self endon( #"death", #"restart_napalm_strike" );
    
    for (i = 0; i < level.var_dde2e62.size; i++) {
        impact = level.var_dde2e62[ i ];
        self util::delay( impact.delay / 1000, "restart_napalm_strike", &function_7b53b328, localclientnum, impact.origin );
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 2, eflags: 0x0
// Checksum 0xa7fd689f, Offset: 0x2880
// Size: 0x1e4
function function_7b53b328( localclientnum, entorigin )
{
    self endon( #"death", #"restart_napalm_strike" );
    var_3b16b806 = sqr( 100 );
    var_87c1e213 = sqr( 2000 );
    distsqr = distance2dsquared( self.origin, entorigin );
    value = ( distsqr - var_3b16b806 ) / ( var_87c1e213 - var_3b16b806 );
    value = max( 0, min( 1, value ) );
    var_ba14d5a2 = 0.2 * value;
    wait var_ba14d5a2;
    
    /#
        dist = distance( self.origin, entorigin );
        println( "<dev string:x38>" + dist + "<dev string:x52>" + var_ba14d5a2 );
    #/
    
    fxname = "maps/cp_prisoner/fx9_exp_napalm_cam_dirt_light";
    
    if ( value < 0.7 )
    {
        fxname = "maps/cp_prisoner/fx9_exp_napalm_cam_dirt_medium";
    }
    
    if ( value < 0.4 )
    {
        fxname = "maps/cp_prisoner/fx9_exp_napalm_cam_dirt_heavy";
    }
    
    fxid = playfxoncamera( localclientnum, fxname );
    self thread function_f6349023( localclientnum, fxid );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 2, eflags: 0x0
// Checksum 0x3c45e8d0, Offset: 0x2a70
// Size: 0x4c
function function_f6349023( localclientnum, fxid )
{
    self waittill( #"restart_napalm_strike" );
    
    if ( isdefined( fxid ) )
    {
        stopfx( localclientnum, fxid );
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0xaf60d2b7, Offset: 0x2ac8
// Size: 0x170
function pstfx_injection( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    if ( bwastimejump )
    {
        if ( self postfx::function_556665f2( "pstfx_t9_cp_prisoner_mkultra" ) )
        {
            self postfx::stoppostfxbundle( "pstfx_t9_cp_prisoner_mkultra" );
        }
        
        if ( self postfx::function_556665f2( "pstfx_t9_cp_prisoner_mkultra_edgeblur" ) )
        {
            self postfx::stoppostfxbundle( "pstfx_t9_cp_prisoner_mkultra_edgeblur" );
        }
        
        self postfx::playpostfxbundle( "pstfx_t9_cp_prisoner_mkultra" );
        self postfx::playpostfxbundle( "pstfx_t9_cp_prisoner_mkultra_edgeblur" );
        level notify( #"mkultra_sound_on" );
        return;
    }
    
    self postfx::exitpostfxbundle( "pstfx_t9_cp_prisoner_mkultra" );
    self postfx::exitpostfxbundle( "pstfx_t9_cp_prisoner_mkultra_edgeblur" );
    level notify( #"mkultra_sound_off" );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x93cc3412, Offset: 0x2c40
// Size: 0x244
function pstfx_teleport( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    if ( bwastimejump == 1 )
    {
        if ( self postfx::function_556665f2( "pstfx_t9_cp_prisoner_mkultra_transition" ) )
        {
            self postfx::stoppostfxbundle( "pstfx_t9_cp_prisoner_mkultra_transition" );
        }
        
        self postfx::playpostfxbundle( "pstfx_t9_cp_prisoner_mkultra_transition" );
        return;
    }
    
    if ( bwastimejump == 2 )
    {
        if ( self postfx::function_556665f2( "pstfx_t9_cp_prisoner_mkultra_transition_short" ) )
        {
            self postfx::stoppostfxbundle( "pstfx_t9_cp_prisoner_mkultra_transition_short" );
        }
        
        self postfx::playpostfxbundle( "pstfx_t9_cp_prisoner_mkultra_transition_short" );
        return;
    }
    
    if ( bwastimejump == 3 )
    {
        if ( self postfx::function_556665f2( "pstfx_t9_cp_prisoner_mkultra_white_transition_short" ) )
        {
            self postfx::stoppostfxbundle( "pstfx_t9_cp_prisoner_mkultra_white_transition_short" );
        }
        
        self postfx::playpostfxbundle( "pstfx_t9_cp_prisoner_mkultra_white_transition_short" );
        return;
    }
    
    if ( self postfx::function_556665f2( "pstfx_t9_cp_prisoner_mkultra_transition" ) )
    {
        self postfx::exitpostfxbundle( "pstfx_t9_cp_prisoner_mkultra_transition" );
    }
    
    if ( self postfx::function_556665f2( "pstfx_t9_cp_prisoner_mkultra_transition_short" ) )
    {
        self postfx::exitpostfxbundle( "pstfx_t9_cp_prisoner_mkultra_transition_short" );
    }
    
    if ( self postfx::function_556665f2( "pstfx_t9_cp_prisoner_mkultra_white_transition_short" ) )
    {
        self postfx::exitpostfxbundle( "pstfx_t9_cp_prisoner_mkultra_white_transition_short" );
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x846e5f20, Offset: 0x2e90
// Size: 0x154
function set_player_pbg_bank( localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwasdemojump )
{
    if ( bwasdemojump == 3 )
    {
        function_be93487f( fieldname, 8, 0, 0, 0, 1 );
        return;
    }
    
    if ( bwasdemojump == 2 )
    {
        function_be93487f( fieldname, 4, 0, 0, 1, 0 );
        return;
    }
    
    if ( bwasdemojump == 1 )
    {
        function_be93487f( fieldname, 2, 0, 1, 0, 0 );
        return;
    }
    
    function_be93487f( fieldname, 1, 1, 0, 0, 0 );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x27f2106b, Offset: 0x2ff0
// Size: 0x2c2
function function_97742742( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    a_n_decals = findvolumedecalindexarray( "sniper_hut_destroy_brush" );
    var_648616bf = findstaticmodelindexarray( "sniper_hut_destroy_brush" );
    
    switch ( bwastimejump )
    {
        case 0:
            foreach ( n_decal in a_n_decals )
            {
                hidevolumedecal( n_decal );
            }
            
            foreach ( model in var_648616bf )
            {
                hidestaticmodel( model );
            }
            
            break;
        case 1:
            foreach ( model in var_648616bf )
            {
                unhidestaticmodel( model );
            }
            
            foreach ( n_decal in a_n_decals )
            {
                unhidevolumedecal( n_decal );
            }
            
            break;
        default:
            break;
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0xc30ac1e6, Offset: 0x32c0
// Size: 0x2c2
function function_fb57d93( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    a_n_decals = findvolumedecalindexarray( "village_destroy_decals" );
    var_648616bf = findstaticmodelindexarray( "village_destroy_models" );
    
    switch ( bwastimejump )
    {
        case 0:
            foreach ( n_decal in a_n_decals )
            {
                hidevolumedecal( n_decal );
            }
            
            foreach ( model in var_648616bf )
            {
                hidestaticmodel( model );
            }
            
            break;
        case 1:
            foreach ( model in var_648616bf )
            {
                unhidestaticmodel( model );
            }
            
            foreach ( n_decal in a_n_decals )
            {
                unhidevolumedecal( n_decal );
            }
            
            break;
        default:
            break;
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x90e72314, Offset: 0x3590
// Size: 0x1da
function render_texture_switch( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    switch ( bwastimejump )
    {
        case 2:
            if ( isdefined( self ) )
            {
                self playrenderoverridebundle( #"hash_6fdd814caee17dde" );
            }
            
            break;
        case 3:
            if ( isdefined( self ) )
            {
                self function_f6e99a8d( #"hash_6fdd814caee17dde" );
            }
            
            break;
        case 4:
            if ( isdefined( self ) )
            {
                self playrenderoverridebundle( #"hash_214cefb1dfb47467" );
            }
            
            break;
        case 5:
            if ( isdefined( self ) )
            {
                self function_f6e99a8d( #"hash_214cefb1dfb47467" );
            }
            
            break;
        case 6:
            if ( isdefined( self ) )
            {
                self playrenderoverridebundle( #"hash_586b487a06277249" );
            }
            
            break;
        case 7:
            if ( isdefined( self ) )
            {
                self function_f6e99a8d( #"hash_586b487a06277249" );
            }
            
            break;
        default:
            break;
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0xfe826b70, Offset: 0x3778
// Size: 0x1da
function render_texture_switch_window( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    switch ( bwastimejump )
    {
        case 2:
            if ( isdefined( self ) )
            {
                self playrenderoverridebundle( #"hash_1bb699c3a4959b8d" );
            }
            
            break;
        case 3:
            if ( isdefined( self ) )
            {
                self function_f6e99a8d( #"hash_1bb699c3a4959b8d" );
            }
            
            break;
        case 4:
            if ( isdefined( self ) )
            {
                self playrenderoverridebundle( #"hash_61cf19cf03e8cdde" );
            }
            
            break;
        case 5:
            if ( isdefined( self ) )
            {
                self function_f6e99a8d( #"hash_61cf19cf03e8cdde" );
            }
            
            break;
        case 6:
            if ( isdefined( self ) )
            {
                self playrenderoverridebundle( #"hash_61cf18cf03e8cc2b" );
            }
            
            break;
        case 7:
            if ( isdefined( self ) )
            {
                self function_f6e99a8d( #"hash_61cf18cf03e8cc2b" );
            }
            
            break;
        default:
            break;
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x8d61c38, Offset: 0x3960
// Size: 0x12e
function function_70723e25( localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    if ( bwastimejump )
    {
        if ( !isdefined( self.var_d392b4d1 ) )
        {
            self.var_d392b4d1 = playfxoncamera( fieldname, level._effect[ #"hash_2b8b4be2cb5925ab" ], ( 4, 6, 8 ), ( 1, -0.05, -0.1 ), ( 0, 0, 1 ) );
            waitframe( 1 );
            self thread cp_post::function_d9475fc( 0.95, undefined, undefined, undefined );
        }
        
        return;
    }
    
    stopfx( fieldname, self.var_d392b4d1 );
    waitframe( 1 );
    self thread cp_post::function_d9475fc( 0.5, undefined, undefined, undefined );
    self.var_d392b4d1 = undefined;
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 1, eflags: 0x0
// Checksum 0xe8e1898b, Offset: 0x3a98
// Size: 0x5c
function on_gameplay_started( *localclientnum )
{
    waitframe( 1 );
    util::function_8eb5d4b0( 3500, 2 );
    setdvar( #"hash_3fe46a1700f8faf6", 0.3 );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0xcdb00784, Offset: 0x3b00
// Size: 0x94
function function_d70f07a2( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    if ( bwastimejump == 1 )
    {
        util::function_8eb5d4b0( 3500, 2 );
        return;
    }
    
    if ( bwastimejump == 2 )
    {
        util::function_21aef83c();
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0xc491a55f, Offset: 0x3ba0
// Size: 0x94
function function_cad5695c( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    if ( bwastimejump == 1 )
    {
        self setanimrestart( #"hash_5ded2bc1daee5a9b" );
        return;
    }
    
    self clearanim( #"hash_5ded2bc1daee5a9b", 0 );
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0xd36f1ffa, Offset: 0x3c40
// Size: 0xc9c
function streamer_handler( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    if ( bwastimejump == 0 )
    {
        return;
    }
    
    if ( bwastimejump == 1 )
    {
        forcestreamxmodel( "p9_vnm_foliage_plant_fern_01" );
        forcestreamxmodel( "mkg_foliage_plant_areca_sml_a" );
        forcestreamxmodel( "p8_col_foliage_fern_sml_dry_offshore_alt" );
        return;
    }
    
    if ( bwastimejump == 2 )
    {
        stopforcestreamingxmodel( "p9_vnm_foliage_plant_fern_01" );
        stopforcestreamingxmodel( "mkg_foliage_plant_areca_sml_a" );
        stopforcestreamingxmodel( "p8_col_foliage_fern_sml_dry_offshore_alt" );
        return;
    }
    
    if ( bwastimejump == 3 )
    {
        forcestreamxmodel( "c_t9_usa_redshirt_01" );
        forcestreamxmodel( "c_t9_usa_redshirt_02" );
        forcestreamxmodel( "c_t9_usa_redshirt_03" );
        forcestreamxmodel( "c_t9_usa_redshirt_04" );
        forcestreamxmodel( "c_t9_us_ally_heads_01_c1" );
        forcestreamxmodel( "c_t9_usa_m1_helmetandstrap_01" );
        forcestreamxmodel( "c_t9_usa_m1_helmetandstrap_03_lod0" );
        forcestreamxmodel( "c_t9_usa_m1_helmetandstrap_04_lod0" );
        return;
    }
    
    if ( bwastimejump == 4 )
    {
        stopforcestreamingxmodel( "c_t9_usa_redshirt_01" );
        stopforcestreamingxmodel( "c_t9_usa_redshirt_02" );
        stopforcestreamingxmodel( "c_t9_usa_redshirt_03" );
        stopforcestreamingxmodel( "c_t9_usa_redshirt_04" );
        stopforcestreamingxmodel( "c_t9_us_ally_heads_01_c1" );
        stopforcestreamingxmodel( "c_t9_usa_m1_helmetandstrap_01" );
        stopforcestreamingxmodel( "c_t9_usa_m1_helmetandstrap_03_lod0" );
        stopforcestreamingxmodel( "c_t9_usa_m1_helmetandstrap_04_lod0" );
        return;
    }
    
    if ( bwastimejump == 5 )
    {
        forcestreamxmodel( "c_t9_vc_ar_enemy_01_body" );
        forcestreamxmodel( "c_t9_vc_ar_enemy_01_a_lod0" );
        forcestreamxmodel( "c_t9_vc_ar_enemy_01_b_lod0" );
        forcestreamxmodel( "c_t9_vc_ar_enemy_01_c_lod0" );
        forcestreamxmodel( "c_t9_vc_lmg_enemy_01_body" );
        forcestreamxmodel( "c_t9_vc_rpg_enemy_01" );
        forcestreamxmodel( "c_t9_vc_smg_enemy_01_body" );
        forcestreamxmodel( "c_t9_vc_shotgun_enemy_01" );
        forcestreamxmodel( "c_t9_vc_sniper_enemy_01_lod0" );
        forcestreamxmodel( "c_t9_vc_sniper_enemy_01_flagshader_lod0" );
        forcestreamxmodel( "p9_c_t9_shg_npc_b_ho_c1" );
        forcestreamxmodel( "c_t9_shg_npc_c_choi_c1" );
        forcestreamxmodel( "c_t9_shg_npc_c_tsoy_c1" );
        forcestreamxmodel( "c_t9_shg_npc_k_lai_c1" );
        forcestreamxmodel( "c_t9_shg_npc_c_yoo_c1" );
        forcestreamxmodel( "c_t9_shg_npc_c_bui_c1" );
        forcestreamxmodel( "c_t9_shg_npc_j_goh" );
        forcestreamxmodel( "c_t9_vc_ar_enemy_01_a_lod0" );
        forcestreamxmodel( "p9_c_t9_shg_npc_b_ho" );
        forcestreamxmodel( "c_t9_shg_npc_c_choi" );
        forcestreamxmodel( "c_t9_shg_npc_c_tsoy" );
        forcestreamxmodel( "c_t9_shg_npc_k_lai" );
        forcestreamxmodel( "c_t9_shg_npc_c_yoo" );
        forcestreamxmodel( "c_t9_shg_npc_c_bui" );
        forcestreamxmodel( "c_t9_vc_bamboo_hat_01_lod0" );
        forcestreamxmodel( "c_t9_vc_ricehat_01_lod0" );
        forcestreamxmodel( "c_t9_vc_headband_01" );
        forcestreamxmodel( "c_t9_vc_pith_ghillie_helmet_01_lod0" );
        return;
    }
    
    if ( bwastimejump == 6 )
    {
        stopforcestreamingxmodel( "c_t9_vc_ar_enemy_01_body" );
        stopforcestreamingxmodel( "c_t9_vc_ar_enemy_01_a_lod0" );
        stopforcestreamingxmodel( "c_t9_vc_ar_enemy_01_b_lod0" );
        stopforcestreamingxmodel( "c_t9_vc_ar_enemy_01_c_lod0" );
        stopforcestreamingxmodel( "c_t9_vc_lmg_enemy_01_body" );
        stopforcestreamingxmodel( "c_t9_vc_rpg_enemy_01" );
        stopforcestreamingxmodel( "c_t9_vc_smg_enemy_01_body" );
        stopforcestreamingxmodel( "c_t9_vc_shotgun_enemy_01" );
        stopforcestreamingxmodel( "c_t9_vc_sniper_enemy_01_lod0" );
        stopforcestreamingxmodel( "c_t9_vc_sniper_enemy_01_flagshader_lod0" );
        stopforcestreamingxmodel( "p9_c_t9_shg_npc_b_ho_c1" );
        stopforcestreamingxmodel( "c_t9_shg_npc_c_choi_c1" );
        stopforcestreamingxmodel( "c_t9_shg_npc_c_tsoy_c1" );
        stopforcestreamingxmodel( "c_t9_shg_npc_k_lai_c1" );
        stopforcestreamingxmodel( "c_t9_shg_npc_c_yoo_c1" );
        stopforcestreamingxmodel( "c_t9_shg_npc_c_bui_c1" );
        stopforcestreamingxmodel( "c_t9_shg_npc_j_goh" );
        stopforcestreamingxmodel( "c_t9_vc_ar_enemy_01_a_lod0" );
        stopforcestreamingxmodel( "p9_c_t9_shg_npc_b_ho" );
        stopforcestreamingxmodel( "c_t9_shg_npc_c_choi" );
        stopforcestreamingxmodel( "c_t9_shg_npc_c_tsoy" );
        stopforcestreamingxmodel( "c_t9_shg_npc_k_lai" );
        stopforcestreamingxmodel( "c_t9_shg_npc_c_yoo" );
        stopforcestreamingxmodel( "c_t9_shg_npc_c_bui" );
        stopforcestreamingxmodel( "c_t9_vc_bamboo_hat_01_lod0" );
        stopforcestreamingxmodel( "c_t9_vc_ricehat_01_lod0" );
        stopforcestreamingxmodel( "c_t9_vc_headband_01" );
        stopforcestreamingxmodel( "c_t9_vc_pith_ghillie_helmet_01_lod0" );
        return;
    }
    
    if ( bwastimejump == 7 )
    {
        forcestreamxmodel( "c_t9_rus_kgb_hq_officer_body1" );
        forcestreamxmodel( "c_t9_cp_rus_kgb_hq_vip_belikov_head_hat" );
        return;
    }
    
    if ( bwastimejump == 8 )
    {
        stopforcestreamingxmodel( "c_t9_rus_kgb_hq_officer_body1" );
        stopforcestreamingxmodel( "c_t9_cp_rus_kgb_hq_vip_belikov_head_hat" );
        return;
    }
    
    if ( bwastimejump == 9 )
    {
        forcestreamxmodel( "p9_vnm_laboratory_rob_hall_section_01" );
        forcestreamxmodel( "p9_vnm_laboratory_rob_hall_section_02" );
        forcestreamxmodel( "p9_vnm_laboratory_rob_hall_section_03" );
        forcestreamxmodel( "p9_vnm_laboratory_rob_hall_section_04" );
        return;
    }
    
    if ( bwastimejump == 10 )
    {
        stopforcestreamingxmodel( "p9_vnm_laboratory_rob_hall_section_01" );
        stopforcestreamingxmodel( "p9_vnm_laboratory_rob_hall_section_02" );
        stopforcestreamingxmodel( "p9_vnm_laboratory_rob_hall_section_03" );
        stopforcestreamingxmodel( "p9_vnm_laboratory_rob_hall_section_04" );
        return;
    }
    
    if ( bwastimejump == 11 )
    {
        forcestreamxmodel( "c_t9_cp_usa_hero_lazar_safehouse_body1" );
        forcestreamxmodel( "c_t9_cp_usa_hero_lazar_head1" );
        forcestreamxmodel( "c_t9_eng_hero_park_undercover_berlin_body1" );
        forcestreamxmodel( "c_t9_eng_hero_park_head" );
        return;
    }
    
    if ( bwastimejump == 12 )
    {
        stopforcestreamingxmodel( "c_t9_cp_usa_hero_lazar_safehouse_body1" );
        stopforcestreamingxmodel( "c_t9_cp_usa_hero_lazar_head1" );
        stopforcestreamingxmodel( "c_t9_eng_hero_park_undercover_berlin_body1" );
        stopforcestreamingxmodel( "c_t9_eng_hero_park_head" );
        return;
    }
    
    if ( bwastimejump == 13 )
    {
        forcestreamxmodel( "c_t9_usa_hero_adler_civ_amsterdam_body" );
        forcestreamxmodel( "c_t9_cp_usa_hero_adler_head1" );
        forcestreamxmodel( "c_t9_cp_rus_hero_perseus_soviet_operator_body1" );
        forcestreamxmodel( "c_t9_cp_rus_hero_perseus_head2" );
        forcestreamxmodel( "c_t9_cp_rus_soviet_army_rudnik_body" );
        forcestreamxmodel( "c_t9_cp_rus_soviet_army_rudnik_head" );
        forcestreamxmodel( "c_t9_cp_ira_militant_vip_arash_body" );
        forcestreamxmodel( "c_t9_cp_ira_militant_vip_arash_head" );
        forcestreamxmodel( "c_t9_cp_usa_cia_aldrich_body" );
        forcestreamxmodel( "c_t9_cp_usa_cia_aldrich_head1" );
        forcestreamxmodel( "c_t9_cp_rus_kgb_volkov_body" );
        forcestreamxmodel( "c_t9_cp_rus_civ_volkov_head" );
        return;
    }
    
    if ( bwastimejump == 14 )
    {
        stopforcestreamingxmodel( "c_t9_usa_hero_adler_civ_amsterdam_body" );
        stopforcestreamingxmodel( "c_t9_cp_usa_hero_adler_head1" );
        stopforcestreamingxmodel( "c_t9_cp_rus_hero_perseus_soviet_operator_body1" );
        stopforcestreamingxmodel( "c_t9_cp_rus_hero_perseus_head2" );
        stopforcestreamingxmodel( "c_t9_cp_rus_soviet_army_rudnik_body" );
        stopforcestreamingxmodel( "c_t9_cp_rus_soviet_army_rudnik_head" );
        stopforcestreamingxmodel( "c_t9_cp_ira_militant_vip_arash_body" );
        stopforcestreamingxmodel( "c_t9_cp_ira_militant_vip_arash_head" );
        stopforcestreamingxmodel( "c_t9_cp_usa_cia_aldrich_body" );
        stopforcestreamingxmodel( "c_t9_cp_usa_cia_aldrich_head1" );
        stopforcestreamingxmodel( "c_t9_cp_rus_kgb_volkov_body" );
        stopforcestreamingxmodel( "c_t9_cp_rus_civ_volkov_head" );
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0xa049bdca, Offset: 0x48e8
// Size: 0xbe
function darkroom_light( localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwasdemojump )
{
    if ( bwasdemojump )
    {
        self.var_23de4c6c = util::playfxontag( fieldname, level._effect[ #"darkroom_light" ], self, "tag_fx" );
        return;
    }
    
    if ( isdefined( self.var_23de4c6c ) )
    {
        killfx( fieldname, self.var_23de4c6c );
        self.var_23de4c6c = undefined;
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x4c354fd2, Offset: 0x49b0
// Size: 0x132
function toggle_occluder( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    switch ( bwastimejump )
    {
        case 0:
            break;
        case 1:
            function_e7647ecd( "river_occluder", 0 );
            break;
        case 2:
            function_e7647ecd( "river_occluder", 1 );
            break;
        case 3:
            function_e7647ecd( "village_occluder", 0 );
            break;
        case 4:
            function_e7647ecd( "village_occluder", 1 );
            break;
        default:
            break;
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0x911314f5, Offset: 0x4af0
// Size: 0x370
function toggle_bone_constraint( *localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwastimejump )
{
    if ( bwastimejump == 1 )
    {
        self function_d309e55a( "strap_l", 0 );
        self function_d309e55a( "strap_r", 0 );
        self function_d309e55a( "strap_l1", 0 );
        self function_d309e55a( "strap_r1", 0 );
        self function_d309e55a( "strap_l2", 0 );
        self function_d309e55a( "strap_r2", 0 );
        self function_d309e55a( "strap_l3", 0 );
        self function_d309e55a( "strap_r3", 0 );
        self function_d309e55a( "dyn_grenade01", 0 );
        self function_d309e55a( "dyn_canteen", 0 );
        self function_d309e55a( "dyn_grenade02", 0 );
        self function_d309e55a( "dyn_smoke_grenade01", 0 );
        self function_d309e55a( "dyn_backpack_strap01", 0 );
        self function_d309e55a( "dyn_smoke_grenade_01", 0 );
        self function_d309e55a( "dyn_smoke_grenade_02", 0 );
        self function_d309e55a( "dyn_smoke_grenade_03", 0 );
        self function_d309e55a( "dyn_antenna", 0 );
        self function_d309e55a( "dyn_backpack_strap02", 0 );
        self function_d309e55a( "dyn_backpack_strap03", 0 );
        self function_d309e55a( "dyn_backpack_strap04", 0 );
        self function_d309e55a( "dyn_backpack_strap05", 0 );
        self function_d309e55a( "dyn_backpack_strap06", 0 );
        self function_d309e55a( "dyn_leg_strap_01", 0 );
        self function_d309e55a( "dyn_leg_strap_02", 0 );
        self function_d309e55a( "dyn_scarf", 0 );
    }
}

// Namespace cp_nam_prisoner/cp_nam_prisoner
// Params 7, eflags: 0x0
// Checksum 0xb7da792d, Offset: 0x4e68
// Size: 0x304
function force_stream_weapons( localclientnum, *oldval, newval, *bnewent, *binitialsnap, *fieldname, *bwasdemojump )
{
    weapons = [];
    
    switch ( bwasdemojump )
    {
        case 1:
            weapons[ weapons.size ] = getweapon( #"hash_4ff481a4f55ed901" );
            weapons[ weapons.size ] = getweapon( #"pistol_semiauto_t9" );
            break;
        case 2:
            weapons[ weapons.size ] = getweapon( #"hash_165cf52ce418f5a1" );
            weapons[ weapons.size ] = getweapon( #"pistol_semiauto_t9", "suppressed" );
            break;
        case 3:
            weapons[ weapons.size ] = getweapon( #"special_grenadelauncher_t9" );
            weapons[ weapons.size ] = getweapon( #"hash_4ff481a4f55ed901" );
            break;
        case 4:
            weapons[ weapons.size ] = getweapon( #"hash_74399c5b0d6971e1" );
            weapons[ weapons.size ] = getweapon( #"hash_4ff481a4f55ed901" );
            break;
        case 5:
            weapons[ weapons.size ] = getweapon( #"shotgun_pump_t9" );
            weapons[ weapons.size ] = getweapon( #"hash_165cf52ce418f5a1" );
            break;
        case 6:
            weapons[ weapons.size ] = getweapon( #"pistol_semiauto_t9" );
            break;
        case 7:
            weapons[ weapons.size ] = getweapon( #"hash_609dfb2c210630ac" );
            break;
    }
    
    self thread util::force_stream_weapons( fieldname, weapons );
}

